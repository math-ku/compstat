{
  "hash": "b903f775088ec01ae3ecec45101c9e5c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Testing And Debugging\"\n---\n\n\n::: {.cell}\n\n:::\n\n\n\n# Testing\n\n## Testing\n\n# Debugging\n\n## Debugging\n\n- Bugs are common (inevitable)\n- The more complex the code, the more bugs (and the harder to find them)\n- Debugging is the process of finding and fixing bugs.\n- Complemetary to **testing**, which is about identifying existence of bugs.\n\n![Down the rabbit hole.](../images/xkcd-debugging.png){width=80%}\n\n---\n\n![The \"first\" bug.](../images/first-bug-reduced.jpg){width=80%}\n\n## Poisson Regression\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 1000\nx <- rnorm(n)\ny <- rpois(n, exp(x))\nX <- model.matrix(y ~ x)\n```\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nXty <- drop(crossprod(X, y))\n\nobjective <- function(beta) {\n  (sum(exp(X %*% beta)) - beta %*% Xty) / nrow(X)\n}\n\ngradient <- function(beta) {\n  (colSums(drop(exp(X %*% beta)) * X) - Xty) / nrow(X)\n}\n```\n:::\n\n\n. . .\n\nGradient descent and Newton method implementations can be found in\n[`debugging.R`](R/debugging.R).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(here::here(\"R/debugging.R\"))\n```\n:::\n\n\n## Testing\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngradient_descent(c(0, 0), objective, gradient, t0 = 1, epsilon = 1e-8)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(Intercept)           x \n 0.02043078  0.96648993 \n```\n\n\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglm(y ~ x, family = \"poisson\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:  glm(formula = y ~ x, family = \"poisson\")\n\nCoefficients:\n(Intercept)            x  \n    0.02043      0.96649  \n\nDegrees of Freedom: 999 Total (i.e. Null);  998 Residual\nNull Deviance:\t    2404 \nResidual Deviance: 1007 \tAIC: 2684\n```\n\n\n:::\n:::\n\n\n### Traceback\n\n- Sometimes enough to simply look at the call stack\n\n### Entering Debug Mode\n\nTwo common ways to enter debug mode:\n\n- `browser()`: Stops execution and enters debug mode\n- Set a breakpoint in RStudio.\n\n. . .\n\n:::: {.columns}\n\n::: {.column width=\"47%\"}\n\n#### `browser()`\n\n- Can be placed anywhere in the code\n- Stops execution and enters debug mode\n\n:::\n\n::: {.column width=\"47%\"}\n\n#### RStudio Breakpoints\n\n- Visual breakpoints\n- Easy to set and remove (click in the margin)\n- No need to modify the code\n- But cannot be conditionally set\n- Sometimes won't work\n\n:::\n\n::::\n\n## Buggy Newton Method\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhessian <- function(beta) {\n  (crossprod(X, drop(exp(X %*% beta)) * X)) / nrow(X)\n}\n```\n:::\n\n\n\n::: {.cell linewidth='80'}\n\n```{.r .cell-code}\nnewton_method(c(0, 0), objective, gradient, hessian)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$par\n(Intercept)           x \n 0.02043077  0.96648993 \n\n$values\n[1] 1.0000000 0.1776786 0.1351937 0.1343990 0.1343986 0.1343986\n```\n\n\n:::\n:::\n\n\n### Exercise: Debugging `newton_method()`\n\n- Download and open [`debugging.R`](R/debugging.R) in RStudio.\n- Create another script and define `objective()`, `gradient()`, and `hessian()`\n  by copying from these slides. --\n\n- Source `debugging.R` and test that `gradient_descent()` works. Now try\n  `newton_method()`. Oh no, there's an error!\n- Insert a breakpoint before the `while` loop and inspect the values of\n  `objective(x_new)`, `values`, `alpha`, `beta` and `grad_d_prod` from within\n  the browser. --\n\n- Explain and fix the bug. Remove the breakpoint.\n- Source the fixed code and try calling `newton_method()`. What happens?\n- Debug the code again, using breakpoints or `browser()`. Finally verify that\n  `newton_method()` works.\n\n## Debugging C++ Code (Rcpp)\n\n- Unfortunately **not** easy.\n- General problem is that C++ code is compiled, so what you see in C++ is not\n  necessarily what is executed. --\n\n- We won't cover it here, but it **is** possible: see\n  [these notes](https://github.com/wch/r-debug/blob/master/debugging-r.md) for\n  instance.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}