---
title: "Introduction"
---

{{< include _common.qmd >}}

```{r init, echo=FALSE, message=FALSE, warning=FALSE}
load(here::here("data", "top100dih.RData"))
phipsi2 <- na.omit(dataset)
phipsi <- read.table(here::here("data", "phipsi.tsv"), header = TRUE)
phipsi[, c("phi", "psi")] <- pi * phipsi[, c("phi", "psi")] / 180
```

## What is Computational Statistics?

:::: {.columns}

::: {.column width="47%"}

- Broad field that can mean different things depending on context.
- One definitions is that it is the use of computational methods to solve
  statistical problems, for instance
  - simulation,
  - optimization,
  - numerical integration,
  - data analysis, and
  - visualization.

:::

::: {.column width="47%"}

![Running examples: Amino Acid Angles](../images/PhiPsi_creative.jpg){width=70%}

:::

::::

## Histograms

:::: {.columns}

::: {.column width="47%"}

```{r hist1}
hist(
  phipsi$phi,
  prob = TRUE,
  xlab = expression(phi),
  main = NULL
)
rug(phipsi$phi)
```

:::

::: {.column width="47%"}

```{r hist2}
hist(
  phipsi$psi,
  prob = TRUE,
  xlab = expression(psi),
  main = NULL
)
rug(phipsi$psi)
```

:::

::::

## Density Estimation

:::: {.columns}

::: {.column width="47%"}

```{r dens1, eval = FALSE}
lines(
  density(phipsi$phi),
  col = "red",
  lwd = 2
)
```

```{r, echo = FALSE, ref.label=c('hist1','dens1')}

```

:::

::: {.column width="47%"}

```{r dens2, eval = FALSE}
lines(
  density(phipsi$psi),
  col = "red",
  lwd = 2
)
```

```{r, echo = FALSE, ref.label=c('hist2','dens2')}

```

:::

::::

## Statistical Topics of the Course

### Smoothing

- What does `density()` do?
- Nonparametric estimators
- Choosing tuning parameters

. . .

### Simulation

- How do we efficiently simulate from a target distribution?
- Assessing results from Monte Carlo methods
- What if we cannot compute the density?

. . .

### Optimization

- How do we compute the MLE?
- How to we deal with large data sets?

## Computational Topics of the Course

### Implementation

- Writing functions
- Object-oriented programming

. . .

### Correctness

- Testing
- Debugging

. . .

### Efficiency

- Profiling
- Optimizing
- Benchmarking

## Teaching Staff

:::: {.columns}

::: {.column width="47%"}

### Instructor

Johan Larsson, postdoctoral researcher

![Johan](../images/johan.jpg){width=50%}

#### Contact

Use Absalon for course-related questions and email (see Absalon) for personal
matters.

:::

::: {.column width="47%"}

### Teaching Assistant

Jinyang Liu, PhD student

![Jin](../images/jinyang.jpg){width=50%}

:::

::::

## Assignments

- Main course work of the course
- Eight assignments, two for each topic
- Four topics
  - Smoothing
  - Univariate simulation
  - The EM algorithm
  - Stochastic optimization
- Pick one assignment per topic.

## Examination

### Presentations

- Present solution to one of the assignments.
- On weeks 3, 4, 6, and 7 (Thursday afternoon sessions).
- Groups of 2-3 students
- Presentation, discussion, and feedback
- [Register in Absalon](https://absalon.ku.dk/courses/76985/groups#tab-25490)
  (limited slots assignment)
- Compulsory but not graded
- Work-in-progress solutions are fine

. . .

### Oral Examination

- Oral exam, presented indivudally.
- Prepare four presentations, one for each assignment you picked.

## Schedule

:::: {.columns}

::: {.column width="47%"}

### Lectures

- Tuesdays and Thursdays, 10:15–12:00 (Johan)

### Exercise Sessions

- Thursdays, 08:15–10:00 (Jinyang)

### Presentations

- Thursdays, 13:15–15:00 (Johan)
- Only weeks 3, 4, 6, and 7

:::

::: {.column width="47%"}

### Examination

- November 6 and 7 (8.15-17.30, tentative)
- Room to be announced

:::

::::

## Course Literature

### Computational Statistics with R

Main textbook for the course, written by Niels Richard Hansen.

- Available online at <https://cswr.nrhstat.org/>
- Not yet complete, but we only use parts that are.
- [Companion package](https://github.com/nielsrhansen/CSwR/tree/master/CSwR_package):
  install with `pak::pak("github::nielsrhansen/CSwR/CSwR_package")`.

. . .

### Advanced R

Auxiliary textbook, written by Hadley Wickham.

- Available online at <https://adv-r.hadley.nz/>
- Covers more advanced R programming topics.
- We will use selected chapters.

## Absalon

Accessed at [absalon.ku.dk](https://absalon.ku.dk/).

:::: {.columns}

::: {.column width="47%"}

- **Course Material**: Slides, videos, data, groups, and assignments.
- Actually based on Canvas (but rebranded for UCPH).
- Download Canvas Student app for your phone.
- Updated as we go along.

:::

::: {.column width="47%"}

![Absalon](../images/absalon.jpg){width=50%}

:::

::::

## Generative AI

- You can use generative AI to help you with your assignments.
- But you must understand the results.
- Can help your learning if used correctly.
- But also hamper your learning if used inappropriately (too much)
- Beware of hallucinations!

# Programming in R

## Prerequisite R Knowledge

We expect knowledge of

- data structures (vectors, lists, data frames),
- control structures (loops, if-then-else),
- function calling,
- interactive and script usage (`source`) of R.

All of this is covered in chapters 1–5 of
[Advanced R](https://adv-r.hadley.nz/).

But you **do not** need to be an experienced programmer.

## Warm-Up Exercises

### Exercise 1

Can you list three ways to access element `a` in this list?

```{r}
l <- list(a = 1, b = 2)
```

```{r, include=FALSE}
l[[1]]
l$a
l[["a"]]
```

. . .

### Exercise 2

Write a for loop that prints "even" if the loop variable is even, "odd" if the
loop variable is odd, and exits if is larger than 10.

# Functions

## Functions in R

- Everything that happens in R is the result of a function call. Even `+`, `[`
  and `<-` are functions.
- An R function takes a number of _arguments_, and when a function call is
  evaluated it computes a _return value_.
- Functions can return any R object, including functions!
- Implementations of R functions are collected into source files, which can be
  organized into packages.
- The order of your functions in the script does not matter.

## Components of a Function

```{r}
f <- function(x, y) {
  x + y
}
```

. . .

:::: {.columns}

::: {.column width="47%"}

### Arguments

```{r}
formals(f)
```

:::

::: {.column width="47%"}

### Body

```{r}
body(f)
```

### Environment

```{r}
environment(f)
```

:::

::::

## Naming Functions

### Use Descriptive Names

- Verbs are great.
- Better long and descriptive than short and cryptic.

. . .

### Naming Convetions

- Avoid `.` in names; it is used for **methods** (upcoming).
- Use consistent style:
  - `lowercase`
  - `snake_case` (tidyverse)
  - `camelCase`
  - `UpperCamelCase`

. . .

### Namespace Clashes

- Avoid names of existing functions.

## Example: Counting Zeros

Count data is often modeled using a Poisson distribution. R can simulate count
data using the function `rpois()`.

```{r, echo=2}
set.seed(1234)
rpois(10, 2) # n = 10 variables from a Poisson(2) distribution
```

. . .

There are two zeros in this sequence.

. . .

Let's write a function that counts the number of zeros: checks for zero
inflation.

## A First Attempt

```{r}
count_zeros <- function(x) {
  n_zeros <- 0
  for (i in 1:length(x)) {
    if (x[i] == 0) {
      n_zeros <- n_zeros + 1
    }
  }
  n_zeros
}

count_zeros(c(3, 2, 0))
```

. . .

```{r}
count_zeros(c(0, 0, 0))
```

## Testing

- Tests that a given input to a function returns what you expect. --

- Thumb of rule: when you find a bug in your function, write a test that fails
  on it; _then_ fix the function. --

- As you refactor your code (or dependent code changes), your tests will catch
  these **regressions** for you. --

- Some people even say that writing tests is the first thing you should do. --

- In R, most common solution is to use the **testthat** package.
- Works best in packages, but is fine for projects too.

## Testing with **testthat**

```{r unit-testing, eval = FALSE, error = TRUE}
# In file tests/test_count_zeros.R
test_that("count_zeros work on various input", {
  expect_equal(count_zeros(c(0, 0, 1e-9, 25)), 2)
  expect_equal(count_zeros(c(-0, 1.1, -2)), 1)
  expect_equal(count_zeros(c()), 0)
})
```

```{r testthat, error = TRUE}
# testthat::test_dir("tests")
```

## A Second Attempt

```{r}
count_zeros <- function(x) {
  n_zeros <- 0
  for (i in seq_along(x)) {
    #<<
    if (x[i] == 0) {
      n_zeros <- n_zeros + 1
    }
  }
  n_zeros
}
```

```{r}
# testthat::test_dir("tests")
```

## Debugging

- Sometimes hard to identify the offending piece of code.
- Helpful to use a debugging tool. R studio comes with a helpful interface for
  this.
- We will talk more about debugging in week 5.

## Functional Programming

`sapply()` is what's typically called a _map_, with a function as its second
argument.

. . .

It is a feature of R as a functional programming language that it can operate
with functions as with any other data structure.

. . .

Let's write our own apply function.

```{r own-apply}
our_apply <- function(x, fun) {
  val <- numeric(length(x)) # initialize vector of return values
  for (i in seq_along(x)) {
    val[i] <- fun(x[[i]])
  }
  val
}
```

## Testing Our Apply Function

```{r}
sapply(1:10, exp)
our_apply(1:10, exp)
```

. . .

### Assumptions

`x` is a list, `fun()` takes a single argument, and `fun()` returns a numeric.

## What if `fun()` Needs Additional Arguments?

```{r, error=TRUE, echo=-1}
set.seed(1)
our_apply(1:10, rpois)
```

. . .

### Anonymous Functions

```{r}
our_apply(
  1:10,
  function(lambda) rpois(1, lambda = 0.9) #<<
)
```

## `...`

The `...` (ellipsis) argument passes arguments forward.

```{r own-apply-2}
our_apply <- function(x, fun, ...) {
  val <- numeric(length(x))
  for (i in seq_along(x)) {
    val[i] <- fun(x[[i]], ...)
  }
  val
}
```

. . .

```{r}
our_apply(1:10, rpois, n = 1)
```

# Benchmarking

## R Is Slow ...

... when used like a low-level language.

- R is an **interpreted** (as opposed to _compiled_) language.
- It was written mainly for specifying statistical models (not for developing
  new numerical methods).
- It is suitable for high-level programming where most low-level computations
  are implemented in a compiled language (e.g. `lm()` and `qr()`.)
- It is also quite old.

## R Is Fast ...

... when most computations are carried out by calls to compiled code.

```{r}
x <- rnorm(1e4)

bench::mark(
  {
    y <- numeric(length(x))
    for (i in seq_along(x)) {
      y[i] <- 10 * x[i]
    }
    y
  },
  10 * x
)
```

## Loops in Disguise

```{r}
bench::mark(
  sapply(x, function(x_i) 10 * x_i),
  10 * x
)
```

. . .

`apply()` and co. are basically just loops in disguise.

## Vectorization

```{r}
count_zeros_vec <- function(x) {
  sum(x == 0)
}
```

. . .

- `x == 0` checks if each entry of `x` is 0 and returns a vector of logicals.
- `sum()` computes and returns the sum of all elements in a vector. Logicals are
  coerced to integers.
- In this case the vectorized implementation is cohesive and clear.
- The vectorized computations are performed by compiled code (C/C++/Fortran),
  which run faster than pure R code.
- Writing vectorized code requires a larger knowledge of R functions.

## Development Cycle Sketch

- Is there a good-enough existing implemention for your problem? If yes, then
  you are done.
- If not, implement a solution and test it. Does it solve your problem
  sufficiently well? If yes, then you're done. --
- If not, then profile (next week!), benchmark, and debug (week 5). Then
  refactor and optimize.

### The Root of All Evil

> We _should_ forget about small efficiencies, say about 97% of the time:
> premature optimization is the root of all evil. Yet we should not pass up our
> opportunities in that critical 3%.
>
> _—Donald Knuth_

## Example: Density Estimation

```{r kernDens}
kern_dens <- function(x, h, m = 512) {
  rg <- range(x)
  xx <- seq(rg[1] - 3 * h, rg[2] + 3 * h, length.out = m)
  y <- numeric(m)

  for (i in seq_along(xx)) {
    for (j in seq_along(x)) {
      #<<
      y[i] <- y[i] + exp(-(xx[i] - x[j])^2 / (2 * h^2)) #<<
    } #<<
  }

  y <- y / (sqrt(2 * pi) * h * length(x))

  list(x = xx, y = y)
}
```

## Vectorizing Our Density Estimator

```{r kernDens-vec}
kern_dens_vec <- function(x, h, m = 512) {
  rg <- range(x)
  xx <- seq(rg[1] - 3 * h, rg[2] + 3 * h, length.out = m)
  y <- numeric(m)
  const <- (sqrt(2 * pi) * h * length(x))

  for (i in seq_along(xx)) {
    y[i] <- sum(exp(-(xx[i] - x)^2 / (2 * h^2))) / const #<<
  }

  list(x = xx, y = y)
}
```

## Benchmarking

```{r kern-bench, cache = TRUE}
kern_bench <- bench::mark(
  kern_dens(phipsi$psi, 0.2),
  kern_dens_vec(phipsi$psi, 0.2)
)

summary(kern_bench)
```

## Plot Benchmark Results

```{r kern-bench-autoplot, message=FALSE, fig.height=4.5, fig.width = 9}
plot(kern_bench, type = "violin")
```

## Parameterized Benchmarking

```{r kern-bench-grid, cache = TRUE, message = FALSE}
kern_benchmarks <- bench::press(
  n = 2^(6:9),
  m = 2^(5:11),
  {
    bench::mark(
      loop = kern_dens(x[1:n], h = 0.2, m = m),
      vec = kern_dens_vec(x[1:n], h = 0.2, m = m)
    )
  }
)

head(kern_benchmarks, 3)
```

## Plotting Results

```{r kern-bench-fig}
#| message: false
#| warning: false
#| fig-width: 7
library(tidyverse)
mutate(kern_benchmarks, expression = as.character(expression)) |>
  ggplot(aes(m, median, color = expression)) +
  geom_point() +
  geom_line() +
  facet_grid(cols = vars(n))
```

## Getting Help with R

### Google It

Especially good for error messages.

. . .

### Generative AI

Also great for error messages and debugging

**Caution**: You need to understand the results, especially when you ask it to
create something for you.

. . .

### Absalon Discussion Forum

Use the fact that there are twenty other people in the course with exactly the
same problem.
