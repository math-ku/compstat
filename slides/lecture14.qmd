---
title: "R Packages and Wrap-Up"
---

## Today

### Distributing and Organizing Code

Workshop in creating an R package

### Course Summary

What did we actually do?

### Oral Examination Prep (Afternoon Session)

What to think of during examination

---

## Organizing Code as an R Package

---

## Organizing Code

:::: {.columns}

::: {.column width="45%"}

### Components

- Code for experiments
- Source code for functions (which we should be able to reuse)
- Tests
- Rcpp code
- Data

There are many ways to organize this. Which one to choose?

:::

::: {.column width="45%"}

### R Package

One way is to make an R package, makes it easy to

- connect to C++ code through Rcpp,
- set up automatic testing,
- document your code, and
- declare dependencies (other packages, R version).

:::

::::

---

## R Packages

:::: {.columns}

::: {.column width="47%"}

Different approaches, but we will follow **R Packages**
[@wickhamPackagesOrganizeTest2023], which is based around the **devtools**
package.

:::

::: {.column width="47%"}

![R Packages](../images/rpkgs-cover-2e-small.png)

:::

::::

---

## Devtools

Meta-package for various helpers that aid in developing R packages (and
projects).

First off, install and load **devtools**:

```r
install.packages("devtools")
library(devtools)
```

:::: {.columns}

::: {.column width="45%"}

This loads other packages that will be useful for setting up your package, most
importantly the **usethis** package.

:::

::: {.column width="45%"}

![](../images/usethis-logo.png)

![](../images/devtools.pdf)

:::

::::

---

## A Toy Example

### Rosenbrock Package

Let's build a simple package that solves the Rosenbrock optimization problem,
i.e. find

$$
x^* = \operatorname{arg\,min}\left((a - x_1)^2 + b(x_2 - x_1^2)^2\right).
$$

### What We Will Learn

- Adding R functions to our package
- Testing our code
- Interfacing with Rcpp
- Adding dependencies to other packages
- Licensing our package
- Documenting the code

---

## A First Package

### Create It

Call

```r
usethis::create_package("rosenbrock")
```

or use `File > New Project > New Directory > R Package using devtools` in R
Studio.

:::: {.columns}

::: {.column width="45%"}

Gives you a **minimal** package:

<!--prettier-ignore-start-->

\dirtree{%
  .1 rosenbrock/.
  .2 R/.
  .2 DESCRIPTION.
  .2 NAMESPACE.
}

<!--prettier-ignore-end-->

You may also have `.Rbuildignore` and `.rosenbrock.Rproj` depending on how you
created the package.

:::

::: {.column width="45%"}

### Install It

Open up the package in your editor (R Studio\footnote{In which case it should
already be opened.}).

```r
devtools::install()
```

Voila, you have made an R package!

:::

::::

## R Code

### `R/`

- All R code should live in `.R`-files in `R/`.
- These files should (almost) always contain **only** functions.
- Many ways to organize your files: one function per file, all functions of a
  certain S3 class in one file etc.

Let's create a first file: `R/objective.R`. Use `usethis::use_r("objective")`
and insert this:

```r
objective <- function(x, a = 1, b = 100) {
  (a - x[1])^2 + b * (x[2] - x[1]^2)^2
}
```

## Workflow

We have created a first R file, but how do we use it? Two major options:

:::: {.columns}

::: {.column width="45%"}

### devtools::install()

Installs the package, like calling `install.packages()`.

Robust but slow. Need to call `library(rosenbrock)` to load
package\footnote{Done automatically in R Studio}.

:::

::: {.column width="45%"}

### `devtools::load_all()`

Sources all of your code.

Quick but not as robust.

:::

::::

---

### Try It

Try both options and see if you can call your newly defined function,
`objective()`.

---

![The various states of a package and how to move between them.](../images/install-load-states.png)

---

## Exporting Functions

If you called `devtools::load_all()` then everything is sourced and you can just
call `objective()` directly.

But if you use `devtools::install()` and `library(rosenbrock)`, then you would
need to use `rosenbrock:::objective()`. The reason is that the function is not
yet exported.

### NAMESPACE

Decides what functions you want exported. But right now it just contains a
comment:

```r
# Generated by roxygen2: do not edit by hand
```

If you want to just export everything, you can remove this file and recreate it
with this content:

```r
exportPattern("^[[:alpha:]]+")
```

---

## roxygen2

**roxygen2** is a package that helps with package
documentation[^more-on-this-later], but it can also be used for handling the
namespace.

[^more-on-this-later]: More on this later.

To export a function, you need to place a special roxygen2 comment just before
the function:

```r
#' @export
```

Go ahead and place this before your `objective()` definition. Then run
`devtools::document()` to roxygenize your package.

Now `NAMESPACE` will (should) contain this:

```r
export(objective)
```

Reinstall the package and see if you can call `objective()` after loading it.

---

## Tests

### testthat

- We have already encountered **testthat** for writing tests in a formalized
  way.
- But **testthat** was actually written especially for packages.

Let's start using **testthat** with our package:

```r
usethis::use_testthat()
```

This creates some new files and directories:

<!--prettier-ignore-start-->

\dirtree{%
  .1 rosenbrock/.
  .2 tests/.
  .3 testthat/.
  .4 test-<some-fun>.R.
  .3 testthat.R.
}

<!--prettier-ignore-end-->

---

## A First Simple Test

For the Rosenbrock function, \(f^\* = f(a,a^2) = f(1,1) = 0\). Let's make sure
this is the case for us too!

To create a test, we can use `usethis::use_test()`.

Call `use_test("objective")` (it's good practice to name the test file the same
as the file where the function you're testing is defined) and insert this:

```r
test_that("multiplication works", {
  # add a test using expect_equal()
})
```

### Check That Everything Works

Run `devtools::test()`, and hopefully see:

```
[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]
```

---

## Checking

### R CMD check

R contains functionality for checking that your package is built correctly and
you can access this functionality through `devtools::check()`.

No requirement that your package needs to pass these checks (if you're using it
as a project), but it's good practice to make sure it does.

- **ERROR**: Major problem with your package
- **WARNING**: Something that is most likely not great but not critical
- **NOTE**: Typically small issues with your package

Now run `devtools::check()`. Is there a problem? Yes, let's fix it!

---

## Metadata

The metadata for your package lives in `DESCRIPTION`. Right now it looks like
this:

```
Package: rosenbrock
Title: What the Package Does (One Line, Title Case)
Version: 0.0.0.9000
Authors@R:
    person("First", "Last", , "first.last@example.com", role = c("aut", "cre"),
           comment = c(ORCID = "YOUR-ORCID-ID"))
Description: What the package does (one paragraph).
License: `use_mit_license()`, `use_gpl3_license()` or friends to pick a
    license
Encoding: UTF-8
Roxygen: list(markdown = TRUE)
RoxygenNote: 7.3.2
```

For now we'll leave most of these files alone, but let's fix one thing: the
license

---

## Licensing

### Why Do You Need a License?

- Licensing software tells other people about how they are allowed to reuse your
  code.
- If you do not provide a license, this generally means that **nobody is allowed
  to copy, distribute, or modify your code.**
- If you have other contributors, then "nobody" includes **you too!**

---

### Choosing a License

So we need to pick a license: for now we'll pick the MIT license.  
(Read more about picking a license at <https://choosealicense.com>.)

```r
usethis::use_mit_license()
```

This will add new files to your package: `LICENSE`, `LICENSE.md`, and modify
`DESCRIPTION`, in which you should see:

```
License: MIT + file LICENSE
```

## Dependencies

In R packages, you make dependencies explicit, defined in `DESCRIPTION`.

### Gradient

Let's say that we want to compute the gradient for the Rosenbrock function.

One way to do so is to use numerical differentiation through the **numDeriv**
package:

```r
gradient <- function(x, a = 1, b = 100) {
  numDeriv::grad(objective, x, a = a, b = b)
}
```

Now our package depends on **numDeriv**, so we need to add it to `DESCRIPTION`:

```r
usethis::use_package("numDeriv")
```

In `DESCRIPTION`, you should now see this:

```
Imports:
  numDeriv
```

---

## Rcpp

:::: {.columns}

::: {.column width="48%"}

Rcpp works best in a package:

- No more manual sourcing (no need to call `Rcpp::sourceCpp()`)
- You don't need to add directives for dependencies to **RcppArmadillo** and
  other packages.

We will rely on **roxygen2**. First, call

```r
usethis::use_package_doc()
```

to set up a package doc file in `R/rosenbrock-package.R`.

:::

::: {.column width="42%"}

Then use `usethis::use_rcpp()` to put the pieces in place:

```
rosenbrock/
└── src/
    └── slop-package.cpp/
```

Now just need to run `devtools::document()` and `devtools::load_all()` or
`devtools::install()` and now your code is available (but not exported).

:::

::::

---

## Exporting Rcpp Code

:::: {.columns}

::: {.column width="45%"}

### Wrapping

Call your Rcpp function through an R wrapper:

```r
my_fun <- function(x) {
  my_fun_cpp(x)
}
```

Typically easier because checking input and preparing output is easier on the R
side.

:::

::: {.column width="45%"}

### Direct Export

You can add roxygen2 comments in Rcpp code too:

```cpp
//' @export
double my_fun_cpp() { ... }
```

Saves you having to write and maintain an R function.

:::

::::

---

## Documentation

:::: {.columns}

::: {.column width="45%"}

### Why?

Because

- you make your code accessible to others,
- it makes you think an extra time about what your function is doing, and
- your future self will thank you.

:::

::: {.column width="45%"}

### Types

- Comments in code
- Manual (help files)
- Long-form articles (vignettes)

:::

::::

### roxygen2

Primary purpose of the package. You write code in a special syntax and it
converts it into manual files that R understands.

## roxygen2 Syntax

```r
#' Function Title
#'
#' Here you describe what the function does, possibly
#' using several lines.
#'
#' @param x Explanation of argument x
#'
#' @return Explanation of what the function returns
#'
#' @export
my_fun <- function(x) {
  ...
}
```

### Your Turn

Document `objective()` with roxygen2 syntax. No need for sensible documentation.
Just make sure you have the bare minimum.

---

## Documentation in This Course

- Not making a package for CRAN, so lower standards.
- You don't need to document to benefit from building a package.
- But it's not a bad idea to do so anyway!

---

![The whole game](../images/pkgs-workflow.png)

---

## Projects

When you have a project, you typically need more things:

- scripts with simulations, etc, which produce output
- datasets stored in different formats
- notebooks (or latex sources)

These things do not naturally fit into a package framework.

---

### Two Choices of Structure

1. Just store these things directly into the package folder. Optionally, you can
   use `.Rbuildignore` to ignore these files when building the package.
2. Put your **package** into a _subdirectory_ of your project. This cleanly
   separates the part of your project that contains reusable code (the package)
   and the part that is experiments and reports. But a little trickier to setup.

## Exercise: Two Options

### Rosenbrock

Continue building the **rosenbrock** package:

- Write a gradient descent (or stochastic gradient descent) implementation that
  minimizes the rosenbrock function.
- Write the code in Rcpp. If you want, you can first write it in R to see that
  everything is working, and then port it.
- Feel free to use generative AI to write the code.
- Export everything and document the package.

### An Assignment

Start trying to convert your work for one assignment into a package

---

## What We Didn't Cover

- Version control through git and github
- How to properly format metadata (`DESCRIPTION`)
- Integrating data into our package
- Publishing to CRAN
- Principled approaches to reproducibility (renv, containers)

---

## Oral Examination Prep

---

## Procedure

1. After entering the room you will connect the computer and check that it works
   with the projector.
2. When all technical issues are settled, you will draw the assignment and find
   the presentation on the computer.
3. Time starts and you have 15 min for the presentation. The examiners may ask
   questions if something needs to be clarified.
4. After 15 min your presentation will be stopped, and the examiners will ask
   questions related to the assignment as well as to the general content of the
   course.
5. After at most 25 min the exam ends, and after assessment you will be given a
   grade.

# References
